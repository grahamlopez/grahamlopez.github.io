
*******
Gentoo
*******

.. contents::
   :local:

Installation Quicknotes
========================

Installation resources

- `gentoo AMD64 handbook (sectioned)
  <https://wiki.gentoo.org/wiki/Handbook:AMD64>`_
- `gentoo AMD64 handbook (installation - Full page)
  <https://wiki.gentoo.org/wiki/Handbook:AMD64/Full/Installation>`_
- `systemd installation <https://wiki.gentoo.org/wiki/Systemd>`_
- `gentoo wiki - Full Disk Encryption From Scratch Simplified
  <https://wiki.gentoo.org/wiki/Full_Disk_Encryption_From_Scratch_Simplified>`_
- `Sakaki's EFI Install Guide
  <https://wiki.gentoo.org/wiki/Sakaki%27s_EFI_Install_Guide>`_


Get to the chroot
------------------

`Enable networking <https://wiki.gentoo.org/wiki/Handbook:AMD64/Installation/Networking>`_:

- ``ifconfig -a``
- ``net-setup wlp3s0``
    (details for `manual wifi setup at Sakaki's guide <https://wiki.gentoo.org/wiki/Sakaki%27s_EFI_Install_Guide/Setting_Up_Networking_and_Connecting_via_ssh>`_)
- ``ping google.com``



`Preparing the disks <https://wiki.gentoo.org/wiki/Handbook:AMD64/Installation/Disks>`_:

- ``lsblk``
- ``parted -a optimal /dev/sda``

- using parted (from `handbook <https://wiki.gentoo.org/wiki/Handbook:AMD64/Installation/Disks#Default:_Using_parted_to_partition_the_disk>`_
  or `Sakaki's guide with LVM, LUKS, EFI boot <https://wiki.gentoo.org/wiki/Sakaki%27s_EFI_Install_Guide/Preparing_the_LUKS-LVM_Filesystem_and_Boot_USB_Key>`_)

    - ``print`` or just ``p`` to print the current partition table
    - make a new partition table (destroys entire disk):

        ``mklabel gpt``
    - set units to work in with e.g. ``unit mib``, ``unit gib``, or ``unit s``
      for sectors. Also need an ``s`` suffix on numbers for working with
      sectors.
    - make partitions
        - ``mkpart primary START END`` (in whatever units)
        - ``mkpart primary fat32 1 1024`` (for an EFI boot partition)
        - ``name 1 grub``
        - ``set 1 boot on`` (`see here
          <https://wiki.gentoo.org/wiki/Handbook:AMD64/Installation/Disks#Default_partitioning_scheme>`_
          and `here
          <https://wiki.gentoo.org/wiki/Handbook:AMD64/Installation/Disks#Creating_the_partitions>`_)

    .. caution:: if the installation media isn't booted with EFI, then
                 '/sys/firmware/efi` will not be properly populated and confuse the grup
                 installation later on.

    .. note:: "For completeness, the BIOS boot partition is needed when a GPT
              partition layout is used with GRUB2 in PC/BIOS mode. It is not required when
              booting in EFI/UEFI mode."

- make the filesystems and mount:
    - ``mkfs.fat -F 32 /dev/sda1`` (see `here in the handbook <https://wiki.gentoo.org/wiki/Handbook:AMD64/Full/Installation#Using_UEFI>`_ about using EFI.)
    - ``mkfs.ext4 /dev/sda3``
    - ``mount /dev/sda3 /mnt/gentoo``
    - ``mkdir -p /mnt/gentoo/boot``
    - ``mount /dev/sda1 /mnt/gentoo/boot``


install stage3

- ensure that the system `time is correct
  <https://wiki.gentoo.org/wiki/Handbook:AMD64/Installation/Stage#Setting_the_date_and_time>`_.
  It is okay if it is still in UTC - we'll fix the timezone later.

- download the tarball:
    - `browse to it with links <https://wiki.gentoo.org/wiki/Handbook:AMD64/Installation/Stage#Downloading_the_stage_tarball>`_:

        ``links https://www.gentoo.org/downloads/mirrors``

        releases --> amd4 --> autobuilds
    - `or get it directly <https://wiki.gentoo.org/wiki/Sakaki%27s_EFI_Install_Guide/Installing_the_Gentoo_Stage_3_Files#Downloading.2C_Verifying_and_Unpacking_the_Gentoo_Stage_3_Tarball>`_:
        - get the release file name from http://distfiles.gentoo.org/releases/amd64/autobuilds/latest-stage3-amd64.txt
        - ``wget -c http://distfiles.gentoo.org/releases/amd64/autobuilds/YYYYMMDDThhmmssZ/stage3-amd64-YYYYMMDDThhmmssZ.tar.xz``
    - and the verification signatures
        - ``wget -c http://distfiles.gentoo.org/releases/amd64/autobuilds/YYYYMMDDThhmmssZ/stage3-amd64-YYYYMMDDThhmmssZ.tar.xz.CONTENTS``
        - ``wget -c http://distfiles.gentoo.org/releases/amd64/autobuilds/YYYYMMDDThhmmssZ/stage3-amd64-YYYYMMDDThhmmssZ.tar.xz.DIGESTS.asc``

- move the tarball to ``/mnt/gentoo``

- unpack the tarball:

    ``tar xvpf stage3-*.tar.xz --xattrs-include='*.*' --numeric-owner``

enter the chroot

- `preconfigure mirrors <https://wiki.gentoo.org/wiki/Mirrorselect>`_ for the new system
    - ``mirrorselect -i -o >> /mnt/gentoo/etc/portage/make.conf`` (interactive selection)
    - ``mirrorselect -c USA -s3 -b10 -D && cp /etc/portage/make.conf /mnt/gentoo/etc/portage`` (choose the 3 fastest USA mirrors)
- mount the filesystems
    - ``mount -t proc /proc /mnt/gentoo/proc``
    - ``mount -R /sys /mnt/gentoo/sys``
    - ``mount -R /dev /mnt/gentoo/dev``
    - ``mount --make-rslave /mnt/gentoo/sys``
    - ``mount --make-rslave /mnt/gentoo/dev``
- ``cp -L /etc/resolv.conf /mnt/gentoo/etc``
- ``chroot /mnt/gentoo /bin/bash``
- ``source /etc/profile``
- ``export PS1="(chroot) ${PS1}"``

Configure/build the system
----------------------------

configure the build options:

- ``mkdir -p /etc/portage/repos.conf``
- ``cp /usr/share/portage/config/repos.conf /etc/portage/repos.conf/gentoo.conf``
  to `set up the repositories <https://wiki.gentoo.org/wiki//etc/portage/repos.conf>`_.
  (and see here for more about the `sync system <https://wiki.gentoo.org/wiki/Project:Portage/Sync>`_)
- ``nano /etc/portage/make.conf``
    - remember ``COMMON_FLAGS="-march=native -02 -pipe`` and ``MAKEOPTS="-j2"``

install a snapshot and update:

- ``emerge-webrsync`` to get the latest snapshot of the portage tree
- ``emerge --sync`` to bring the portage tree up to date

configure the build options for the system

.. error:: FIXME

           - `set the ACCEPT_LICENSE options <https://wiki.gentoo.org/wiki/Handbook:AMD64/Full/Installation#Optional:_Configuring_the_ACCEPT_LICENSE_variable>`_
           - set package options in /etc/portage/package.use/

build the system

- ``eslect profile list/set``

    "A profile is a building block for any Gentoo system. Not only does it
    specify default values for USE, CFLAGS, and other important variables, it
    also locks the system to a certain range of package versions. These settings
    are all maintained by Gentoo's Portage developers."

    `gentoo wiki on profiles <https://wiki.gentoo.org/wiki/Profile_(Portage)>`_

- ``emerge --ask --verbose--update --deep --newuse @world``

- here, we can go ahead and install vim, tmux, zsh, git

initial system configuration

- set the timezone::

    echo "America/New_York" > /etc/timezone
    emerge --config sys-libs/timezone-data

- configure locale (`localization guide
  <https://wiki.gentoo.org/wiki/Localization/Guide>`_ and the `utf8 article
  <https://wiki.gentoo.org/wiki/UTF-8>`_)::

    vim /etc/locale.gen

    en_US ISO-8859-1
    en_US.UTF-8 UTF-8

    locale-gen
    eselect locale list/set
    env-update && source /etc/profile

configure/build the kernel
---------------------------

- ``emerge --ask sys-kernel/gentoo-sources``
- ``cd /usr/src/linux``
- ``make localyesconfig``
- ``make && make modules_install``
- ``make install``

filesystem information
-----------------------

Edit ``/etc/fstab`` with either device names or UUIDs as given by the ``blkid``
command. Note that the ``/boot`` partition doesn't necessarily have to be
present/mounted.

networking
-----------

Edit ``/etc/conf.d/hostname`` to set the hostname.

- ``emerge -a --noreplace net-misc/netifrc``
- ``emerge -a dhcpcd wpa_supplicant``
- ``vim /etc/conf.d/net``
- add hostname to ``/etc/hosts```
- ``vim /etc/wpa_supplicant/wpa_supplicant.conf``::

    # The below line not be changed otherwise wpa_supplicant refuses to work
    ctrl_interface=/var/run/wpa_supplicant

    # Ensure that only root can read the WPA configuration
    ctrl_interface_group=0

    # Let wpa_supplicant take care of scanning and AP selection
    ap_scan=1

    # Simple case: WPA-PSK, PSK as an ASCII passphrase, allow all valid ciphers
    network={
      ssid="simple"
      psk="very secret passphrase"
      # The higher the priority the sooner we are matched
      priority=5
    }

- ``rc-update add wpa_supplicant default``

see here for information on `wireless networking in gentoo
<https://wiki.gentoo.org/wiki/Handbook:X86/Networking/Wireless>`_.

probably also need `firmware for iwlwifi
<https://wiki.gentoo.org/wiki/Iwlwifi>`_.

- ``emerge linux-firmware``
- and make the kernel options modules::

	Device Drivers  --->

	        [*] Network device support  --->

	        --- Network device support
	        [*]   Wireless LAN  --->

	            --- Wireless LAN
	            [ ]   mac80211-based legacy WDS support
	            [ ]   ADMtek devices
	            [ ]   Atheros/Qualcomm devices
	            [ ]   Atmel devices
	            [ ]   Broadcom devices
	            [ ]   Cisco devices
	            [*]   Intel devices
	            < >     Intel PRO/Wireless 2100 Network Connection
	            < >     Intel PRO/Wireless 2200BG and 2915ABG Network Connection
	            < >     Intel Wireless WiFi 4965AGN (iwl4965)
	            < >     Intel PRO/Wireless 3945ABG/BG Network Connection (iwl3945)
	            <M>     Intel Wireless WiFi Next Gen AGN - Wireless-N/Advanced-N/Ultimate-N (iwlwifi)
	            <M>       Intel Wireless WiFi DVM Firmware support
	            <M>       Intel Wireless WiFi MVM Firmware support
	                      Debugging Options  --->
	            [ ]   Intersil devices


install utilities
------------------

miscellaneous configuration

- set the root password
- check ``/etc/rc.conf``
- check ``/etc/conf.d/hwclock``

`install utilities
<https://wiki.gentoo.org/wiki/Handbook:AMD64/Full/Installation#System_logger>`_

- ``emerge syslog-ng logrotate cronie mlocate e2fsprogs dosfstools parted``
- ``rc-update add syslog-ng default``
- ``rc-update add cronie default``

bootloader
-----------

the `default grub
<https://wiki.gentoo.org/wiki/Handbook:AMD64/Full/Installation#Default:_GRUB2>`_
from the handbook

- ``emerge -av sys-boot/grub:2``
- be sure that ``GRUB_PLATFORMS="efi-64"`` shows up in the output before
  emerging. If not, then enable with ``echo 'GRUB_PLATFORMS="efi-64"' >> /etc/portage/make.conf``
- mount the EFI system partion (has "esp" flag in ``parted -l /dev/sda`` output)
- ``grub-install --target=x86_64-efi --efi-directory=/boot``
- ``grub-mkconfig -o /boot/grub/grub.cfg``

More installation security
===========================

It is good to verify all of the downloads (stage3 snapshot, portage tree
snapshot, and each package source download) to make sure that they haven't been
tampered with (as far as the signing author is concerned).

- https://wiki.gentoo.org/wiki/Handbook:AMD64/Installation/Stage#Verifying_and_validating

Dual Booting (e.g. Ubuntu)
===========================

(coming soon)

for starters, see the tip box in the `grub configure
<https://wiki.gentoo.org/wiki/Handbook:AMD64/Full/Installation#Configure>`_
section. (grub-mkconfig)

consider ``sys-boot/os-prober`` for Detect other operating systems


Ubuntu 20.04 after Gentoo
---------------------------

This was an odd experiment. I had super vanilla (no lvm, normal grub, etc)
gentoo installed on ``/dev/sda3``, with its ``/boot`` and ESP on ``/dev/sda1``.
I then ``dd if=/dev/sda3 of=/dev/sda4``, and copied the ``/boot`` from
``/dev/sda1`` to the ``/boot`` directory on ``/dev/sda4``. This gave me two
identical gentoos, even with the same UUIDs in ``/etc/fstab`` (since they come
from the filesystem).

The ubuntu installer asked me about installing beside multiple other oses, but
the option it gave me for automatic drive formatting didn't look reasonable. So
I did the advanced setup myself. Here, I selected ``/dev/sda5`` as a physical
lvm partition for encryption and set a passphrase. Then I place root on it as
ext4. The installer complained that since it was encrypted, it needed a separate
``/boot``, so I placed this on ``/dev/sda2`` as ext4.

This resulted in ubuntu placing a new EFI entry first in the bios, and
presenting a grub menu with ubuntu, and gentoo on ``/dev/sda4``. Both of these
boot fine. I can boot gentoo on ``/dev/sda3`` by entering the bios boot
selection and picking the "gentoo" option, which is now second in the list.

Suspicions

- Ubuntu's bootloader is booting sda4 gentoo because it can find the ``/boot``
  easily, and it needs at least the kernel and maybe the efi info from it.
- Ubuntu can boot ``/dev/sda4`` gentoo because Ubuntu's bootloader is ignoring
  the grub config in ``/boot`` of ``/dev/sda4``.
- I'm not completely sure how other parts of the system are getting confused by
  the identical UUIDs, but presumably the device argument to the kernel at boot
  time is enough to settle this.
- There seem to be two ways to easily dual-boot these two (ubuntu/gentoo):

    - The ``os-prober`` utility from within ubuntu finds both gentoos. However, the
      ``30_os-prober`` script is only generating an entry for ``/dev/sda4`` gentoo
      in ``/boot/grub/grub.cfg`` in ubuntu. Maybe I can also configure grub the grub
      config in ubuntu to include the ``/dev/sda1,3`` gentoo. The simplest way seems
      to be to use the ``/etc/grub.d/40_custom`` entry and then rerun something like
      ``grub-mkconfig`` - just copy the menu entries from the original gentoo's
      ``/boot/grub/grub.cfg``.
    - One could just go ahead and let any OS install itself onto unused
      parition(s), and then use the bios EFI selector to order and pick. This
      also implies that partioning needs to include at least a separate boot/esp
      partition for each OS (especially if it is encrypted).

Encrypted drive
======================

This is done with ``dm-crypt`` and LUKS. Setting up the drives is
straightforward. But then an initramfs is also needed so that the kernel can
decrypt the root drive when booting.

(coming soon)

Rescue partitions and media
============================

consider ``dev-libs/libisoburn`` for Create rescue media (grub-mkrescue)

manual backups
---------------

One could use the following procedure:

1. tar up the host sysem (from live media / not when it is booted)
2. untar from live media onto a new partition as if it were a mega stage3
3. change uuids as needed in ``/etc/fstab``, etc.
4. possibly reinstall/reconfigure the bootloader with e.g.

    - ``grub-install --target=x86_64-efi --efi-directory=/boot``
    - ``grub-mkconfig -o /boot/grub/grub.cfg``

UEFI boot (no bootloader)
==========================

In fact, even though either ``grub`` or ``efibootmgr`` are typically used to
boot EFI systems, it can be done straight from the bios as described in Sakaki's
guide.

(coming soon)

Systemd / Gnome 3.28+
======================

This can be done as a conversion after the installation - really at any time.

(coming soon)

Notes on Using Portage
=======================

https://wiki.gentoo.org/wiki/Portage

tips and tricks
----------------

If you want to enable Portage completions and Gentoo prompt,
``emerge app-shells/gentoo-zsh-completions`` and add::

     autoload -U compinit promptinit
     compinit
     promptinit; prompt gentoo

to your ``~/.zshrc``
Also, if you want to enable cache for the completions, add
``zstyle ':completion::complete:*' use-cache 1``
to your ``~/.zshrc``

